name: Deploy to Digital Ocean

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add servers to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.DROPLET_IP }} >> ~/.ssh/known_hosts
          ssh-keyscan -H ${{ secrets.SQL_DROPLET_IP }} >> ~/.ssh/known_hosts

      - name: Deploy to server
        run: |
          ssh -o ServerAliveInterval=60 -o ServerAliveCountMax=3 root@${{ secrets.DROPLET_IP }} << 'EOF'
          
          # Create application directory
          mkdir -p /var/www/rentall-cars
          cd /var/www/rentall-cars
          
          # Stop existing services if running
          pm2 delete all || true
          
          # Backup current deployment (if exists)
          if [ -d "current" ]; then
            rm -rf backup
            mv current backup
          fi
          
          # Clone/update repository
          if [ -d "repo" ]; then
            cd repo
            git fetch origin
            git reset --hard origin/main
            git pull origin main
          else
            git clone https://github.com/${{ github.repository }}.git repo
            cd repo
          fi
          
          # Create new deployment directory
          cd ..
          cp -r repo current
          cd current
          
          # Verify files are present
          echo "Files in current directory:"
          ls -la
          echo "Backend directory:"
          ls -la RentALL_Cars_API_V3.1.5/ || echo "Backend directory not found"
          echo "Frontend directory:"
          ls -la RentALL_Cars_V3.1.5/ || echo "Frontend directory not found"
          
          EOF

      - name: Setup MySQL Database
        run: |
          ssh -o ServerAliveInterval=60 root@${{ secrets.SQL_DROPLET_IP }} << 'EOF'
          
          # Install MySQL if not present
          sudo apt-get update
          sudo apt-get install -y mysql-server
          
          # Start MySQL service
          sudo systemctl start mysql
          sudo systemctl enable mysql
          
          # Secure MySQL installation (basic setup)
          sudo mysql -e "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '${{ secrets.DATABASE_PASSWORD }}';" || true
          sudo mysql -e "FLUSH PRIVILEGES;"
          
          # Create database and user with mysql_native_password authentication
          sudo mysql -uroot -p${{ secrets.DATABASE_PASSWORD }} << MYSQLEOF || true
          DROP DATABASE IF EXISTS ${{ secrets.DATABASE_DBNAME }};
          CREATE DATABASE ${{ secrets.DATABASE_DBNAME }};
          DROP USER IF EXISTS '${{ secrets.DATABASE_USERNAME }}'@'%';
          DROP USER IF EXISTS '${{ secrets.DATABASE_USERNAME }}'@'localhost';
          
          -- Create user with mysql_native_password authentication
          CREATE USER '${{ secrets.DATABASE_USERNAME }}'@'%' IDENTIFIED WITH mysql_native_password BY '${{ secrets.DATABASE_PASSWORD }}';
          CREATE USER '${{ secrets.DATABASE_USERNAME }}'@'localhost' IDENTIFIED WITH mysql_native_password BY '${{ secrets.DATABASE_PASSWORD }}';
          
          -- Grant privileges
          GRANT ALL PRIVILEGES ON ${{ secrets.DATABASE_DBNAME }}.* TO '${{ secrets.DATABASE_USERNAME }}'@'%';
          GRANT ALL PRIVILEGES ON ${{ secrets.DATABASE_DBNAME }}.* TO '${{ secrets.DATABASE_USERNAME }}'@'localhost';
          
          -- Set default authentication plugin globally
          SET GLOBAL default_authentication_plugin = 'mysql_native_password';
          
          FLUSH PRIVILEGES;
          MYSQLEOF
          
          # Update MySQL configuration
          echo "[mysqld]" | sudo tee -a /etc/mysql/mysql.conf.d/mysqld.cnf
          echo "default_authentication_plugin=mysql_native_password" | sudo tee -a /etc/mysql/mysql.conf.d/mysqld.cnf
          
          # Allow remote connections
          sudo sed -i 's/bind-address\s*=\s*127.0.0.1/bind-address = 0.0.0.0/' /etc/mysql/mysql.conf.d/mysqld.cnf || true
          
          # Restart MySQL
          sudo systemctl restart mysql
          
          # Open MySQL port
          sudo ufw allow 3306
          
          EOF

      - name: Import Database Dump
        timeout-minutes: 5
        run: |
          if [ -f "./RentALL_Cars_V3.1.5/db/db_dump.sql" ]; then
            echo "Database dump found, copying to SQL droplet..."
            scp ./RentALL_Cars_V3.1.5/db/db_dump.sql root@${{ secrets.SQL_DROPLET_IP }}:/tmp/
            
            ssh root@${{ secrets.SQL_DROPLET_IP }} << 'EOF'
            mysql -u${{ secrets.DATABASE_USERNAME }} -p${{ secrets.DATABASE_PASSWORD }} ${{ secrets.DATABASE_DBNAME }} < /tmp/db_dump.sql
            rm /tmp/db_dump.sql
            echo "Database import completed successfully!"
          EOF
          else
            echo "Database dump not found, skipping import..."
          fi

      - name: Setup System Dependencies
        timeout-minutes: 10
        run: |
          ssh -o ServerAliveInterval=60 root@${{ secrets.DROPLET_IP }} << 'EOF'
          
          # Update system packages
          sudo apt-get update
          
          # Install Node.js 20.x (recommended for SSR apps)
          if ! command -v node &> /dev/null; then
            curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
            sudo apt-get install -y nodejs
          fi
          
          # Install yarn and pm2 globally
          npm install -g yarn pm2
          
          # Install Nginx
          sudo apt-get install -y nginx
          
          # Create swap file for memory-intensive builds
          if [ ! -f /swapfile ]; then
            sudo fallocate -l 4G /swapfile  # Increased to 4G for SSR builds
            sudo chmod 600 /swapfile
            sudo mkswap /swapfile
            sudo swapon /swapfile
            echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab
          fi
          
          EOF

      - name: Setup Backend
        timeout-minutes: 15
        run: |
          ssh -o ServerAliveInterval=60 root@${{ secrets.DROPLET_IP }} << 'EOF'
          cd /var/www/rentall-cars/current/RentALL_Cars_API_V3.1.5
          
          echo "Setting up backend..."
          
          # Install dependencies
          yarn install 
          
          # Update MySQL packages
          yarn add mysql2@latest sequelize@latest || true
          
          # Create environment file
          cat > .env << 'ENVEOF'
          NODE_ENV=production
          PORT=4000
          DATABASE_URL=mysql://${{ secrets.DATABASE_USERNAME }}:${{ secrets.DATABASE_PASSWORD }}@${{ secrets.SQL_DROPLET_IP }}:3306/${{ secrets.DATABASE_DBNAME }}?authPlugin=mysql_native_password
          DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}
          DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
          DATABASE_DBNAME=${{ secrets.DATABASE_DBNAME }}
          DATABASE_HOST=${{ secrets.SQL_DROPLET_IP }}
          DATABASE_DIALECT=mysql
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          WEBSITE_HOSTNAME=${{ secrets.CUSTOM_DOMAIN }}
          SITE_URL=https://${{ secrets.CUSTOM_DOMAIN }}
          SITENAME=${{ secrets.SITENAME }}
          WEBSITE_URL=https://${{ secrets.CUSTOM_DOMAIN }}
          SOCKET_PORT=4001
          SOCKET_URL=wss://${{ secrets.CUSTOM_DOMAIN }}
          STRIPE_SECRET=${{ secrets.STRIPE_SECRET }}
          PAYPAL_RETURN_URL=${{ secrets.PAYPAL_RETURN_URL }}
          PAYPAL_CANCEL_URL=${{ secrets.PAYPAL_CANCEL_URL }}
          PAYPAL_SUCCESS_REDIRECT_URL=${{ secrets.PAYPAL_SUCCESS_REDIRECT_URL }}
          COINBASE_URL=${{ secrets.COINBASE_URL }}
          PLACE_DETAILS_URL=${{ secrets.PLACE_DETAILS_URL }}
          PLACES_AUTOCOMPLETE_URL=${{ secrets.PLACES_AUTOCOMPLETE_URL }}
          GOOGLE_MAP_SERVER_API=${{ secrets.GOOGLE_MAP_SERVER_API }}
          CRON_TIMEZONE=${{ secrets.CRON_TIMEZONE }}
          FILEUPLOAD_DIR=./images/upload/
          BANNER_UPLOAD_DIR=./images/banner/
          PROFILE_PHOTO_UPLOAD_DIR=./images/avatar/
          DOCUMENT_UPLOAD_DIR=./images/document/
          LOCATION_UPLOAD_DIR=./images/popularLocation/
          HOME_BANNER_UPLOAD_DIR=./images/home/
          CLAIM_IMAGES_UPLOAD_DIR=./images/claims/
          FAVICON_UPLOAD_DIR=./images/favicon/
          WHYHOST_UPLOAD_DIR=./images/whyhost/
          LOGOUPLOAD_DIR=./images/logo/
          OGIMAGEUPLOAD_DIR=./images/og-image/
          ENVEOF
          
          echo "Backend setup completed"
          EOF

      - name: Setup Frontend (SSR)
        timeout-minutes: 20
        run: |
          ssh -o ServerAliveInterval=60 root@${{ secrets.DROPLET_IP }} << 'EOF'
          cd /var/www/rentall-cars/current/RentALL_Cars_V3.1.5
          
          echo "Setting up SSR frontend..."
          
          # Install dependencies
          yarn install 
          
          # Create environment file optimized for SSR
          cat > .env << 'ENVEOF'
          NODE_ENV=production
          PORT=3000
          # Fix: Use custom domain in all URLs
          WEBSITE_HOSTNAME=${{ secrets.CUSTOM_DOMAIN }}
          # Client-side environment variables
          REACT_APP_API_URL=https://${{ secrets.CUSTOM_DOMAIN }}/api
          REACT_APP_SOCKET_URL=wss://${{ secrets.CUSTOM_DOMAIN }}
          REACT_APP_NODE_ENV=production
          REACT_APP_JWT_SECRET=${{ secrets.JWT_SECRET }}
          REACT_APP_STRIPE_SECRET=${{ secrets.STRIPE_SECRET }}
          REACT_APP_GOOGLE_MAP_API=${{ secrets.GOOGLE_MAP_CLIENT_API }}
          # Server-side environment variables
          DATABASE_URL=mysql://${{ secrets.DATABASE_USERNAME }}:${{ secrets.DATABASE_PASSWORD }}@${{ secrets.SQL_DROPLET_IP }}:3306/${{ secrets.DATABASE_DBNAME }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          COINBASE_URL=${{ secrets.COINBASE_URL }}
          PLACE_DETAILS_URL=${{ secrets.PLACE_DETAILS_URL }}
          PLACES_AUTOCOMPLETE_URL=${{ secrets.PLACES_AUTOCOMPLETE_URL }}
          PAYPAL_RETURN_URL=${{ secrets.PAYPAL_RETURN_URL }}
          PAYPAL_CANCEL_URL=${{ secrets.PAYPAL_CANCEL_URL }}
          PAYPAL_SUCCESS_REDIRECT_URL=${{ secrets.PAYPAL_SUCCESS_REDIRECT_URL }}
          STRIPE_SECRET=${{ secrets.STRIPE_SECRET }}
          GOOGLE_MAP_SERVER_API=${{ secrets.GOOGLE_MAP_SERVER_API }}
          CRON_TIMEZONE=${{ secrets.CRON_TIMEZONE }}
          # File upload directories
          FILEUPLOAD_DIR=./images/upload/
          BANNER_UPLOAD_DIR=./images/banner/
          PROFILE_PHOTO_UPLOAD_DIR=./images/avatar/
          DOCUMENT_UPLOAD_DIR=./images/document/
          LOCATION_UPLOAD_DIR=./images/popularLocation/
          HOME_BANNER_UPLOAD_DIR=./images/home/
          CLAIM_IMAGES_UPLOAD_DIR=./images/claims/
          FAVICON_UPLOAD_DIR=./images/favicon/
          WHYHOST_UPLOAD_DIR=./images/whyhost/
          LOGOUPLOAD_DIR=./images/logo/
          OGIMAGEUPLOAD_DIR=./images/og-image/
          # Internal API URLs for SSR
          API_URL=http://localhost:4000
          SOCKET_URL=http://localhost:4001
          SOCKET_PORT=4001
          SERVER_API_URL=http://localhost:4000
          # Asset serving configuration
          PUBLIC_URL=/
          ASSET_PATH=/assets/
          ENVEOF
          
          echo "Frontend SSR setup completed"
          EOF

      - name: Check Nginx Configuration Location
        timeout-minutes: 5
        run: |
          ssh root@${{ secrets.DROPLET_IP }} << 'EOF'
          
          echo "=== NGINX CONFIGURATION CHECK ==="
          
          # Check different possible Nginx config locations
          echo "Checking /etc/nginx/sites-available/:"